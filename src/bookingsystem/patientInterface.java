/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bookingsystem;

import java.io.FileWriter;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author IT Services
 */
public class patientInterface extends javax.swing.JFrame {
 
   physicians[] Physician; 
   int pID = 0;
   static int bookID = 2000;
   int physID = 0;
   int tID;
   mainLogin obj = new mainLogin();
    /**
     * Creates new form adminInterface
     */
    public patientInterface() {
        initComponents();
        cmbxphysician.enable(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        cmbxphysician = new javax.swing.JComboBox<>();
        cmbxspecialisation = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPhysician = new javax.swing.JTable();
        btnbookAppointment = new javax.swing.JButton();
        btnCancelAppointment = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btnattended = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblPatientHistory = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 204, 255));

        jTabbedPane1.setBackground(new java.awt.Color(0, 153, 255));

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Search by physician");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Search by specialisation");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        cmbxphysician.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbxphysicianActionPerformed(evt);
            }
        });

        cmbxspecialisation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbxspecialisationActionPerformed(evt);
            }
        });

        tblPhysician.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Physician Name", "Specialisation", "TreatmentID", "Treatment", "Day Time", "Room Name", "Room Status", "Appointment Status", "Patient", "BookingID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPhysician);

        btnbookAppointment.setText("Book Appointment");
        btnbookAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbookAppointmentActionPerformed(evt);
            }
        });

        btnCancelAppointment.setText("Cancel Appointment");
        btnCancelAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelAppointmentActionPerformed(evt);
            }
        });

        jButton1.setText("LogOut");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnattended.setText("Attended");
        btnattended.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnattendedActionPerformed(evt);
            }
        });

        jButton2.setText("Not Attanded");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Make Available");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(jRadioButton1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(cmbxphysician, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 742, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jRadioButton2)
                        .addGap(54, 54, 54))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(cmbxspecialisation, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(btnbookAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnattended, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbxspecialisation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbxphysician, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btnbookAppointment)
                    .addComponent(btnCancelAppointment)
                    .addComponent(btnattended)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Patient", jPanel2);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        tblPatientHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Physician Name", "Specialisation", "TreatmentID", "Treatment", "Day Time", "Room Name", "Room Status", "Appointment Status", "Patient", "BookingID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblPatientHistory);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(327, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Patient History", jPanel1);

        jLabel1.setBackground(new java.awt.Color(153, 204, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Patients");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
         DefaultTableModel dt= (DefaultTableModel)tblPhysician.getModel();
            dt.setRowCount(0);
        if(jRadioButton1.isSelected()){
            cmbxphysician.enable(true);
            cmbxspecialisation.enable(false);
        }
            
            
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
         DefaultTableModel dt= (DefaultTableModel)tblPhysician.getModel();
            dt.setRowCount(0);
         if(jRadioButton2.isSelected()){
            cmbxphysician.enable(false);
            cmbxspecialisation.enable(true);
        }
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void cmbxphysicianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbxphysicianActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dt= (DefaultTableModel)tblPhysician.getModel();
        dt.setRowCount(0);
        if(jRadioButton1.isSelected()){
        String number = cmbxphysician.getItemAt(cmbxphysician.getSelectedIndex());
        number = number.substring(0, number.indexOf("-")-1);
        int i = Integer.parseInt(number);
        physID= i;
        
        dt = obj.getPhysicianData(i,dt,true);
        
        int row=dt.getRowCount();
        int column = dt.getColumnCount();
        int[] remove= new int[25];
        int l=0;
        for(int j=0;j<row;j++){
            for(int k=0;k<column;k++){
                Object ob = dt.getValueAt(j, k);
                if(ob==null){
                    remove[l]=j;
                    l++;
                    dt.removeRow(j);
                    j=0;
                    row--;
                    //System.out.println(remove);
                    break;
                }
                
            }
           // dt.removeRow(remove);
        }
       /* for(int j=0;j<l;j++)
           dt.removeRow(j); */
           // if(dt.getValueAt(1, 2).equals("null")){
               // dt.removeRow(1);
           // }
        //}
        
        tblPhysician.setModel(dt);
        }
    }//GEN-LAST:event_cmbxphysicianActionPerformed

    private void cmbxspecialisationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbxspecialisationActionPerformed
        // TODO add your handling code here:
        if(jRadioButton2.isSelected()){
            DefaultTableModel dt= (DefaultTableModel)tblPhysician.getModel();
            dt.setRowCount(0);
           
            String specialization = cmbxspecialisation.getItemAt(cmbxspecialisation.getSelectedIndex());
            
            dt = obj.getSpecializationData(dt,specialization,true);
        
        int row=dt.getRowCount();
        int column = dt.getColumnCount();
       
        
        for(int j=0;j<row;j++){
            for(int k=0;k<column;k++){
                Object ob = dt.getValueAt(j, k);
                if(ob==null){
                    
                    
                    dt.removeRow(j);
                    j=0;
                    row--;
                    //System.out.println(remove);
                    break;
                }
                
            }
           // dt.removeRow(remove);
        }
        }
    }//GEN-LAST:event_cmbxspecialisationActionPerformed

    private void btnbookAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbookAppointmentActionPerformed
        // TODO add your handling code here:
        
        int i =tblPhysician.getSelectedRow();
        String status = tblPhysician.getValueAt(i, 7).toString();
        if(status.equals("Empty") || status.equals("Cancelled") ){
            
            //int bID = Integer.parseInt(tblPhysician.getValueAt(i, 9).toString());
            boolean chk=obj.checkAlreadyBooking(pID, tblPhysician.getValueAt(i, 4).toString());
            if(chk){
                 JOptionPane.showMessageDialog(this,"Already Booked the same slot appointment with some other Physician/Treatment");  
            }else{
                tblPhysician.setValueAt("Booked", i, 7 );
                tblPhysician.setValueAt(pID, i, 8);
                tblPhysician.setValueAt(bookID++, i, 9);
                tID = Integer.parseInt(tblPhysician.getValueAt(i, 2).toString());
                obj.bookAppointment("Booked", pID, tblPhysician.getValueAt(i, 0).toString(),tID,bookID);
            }
        }else if(status.equals("Booked")){
            JOptionPane.showMessageDialog(this,"Already Booked");  
        }else if(status.equals("Attended")){
             JOptionPane.showMessageDialog(this,"You can not book attended appointment");  
        }else if(status.equals("Not Attended")){
             JOptionPane.showMessageDialog(this,"You can not book not attended appointment make it available first");  
        }
        DefaultTableModel dt= (DefaultTableModel)tblPatientHistory.getModel();
        Object o[]= {tblPhysician.getValueAt(i, 0),tblPhysician.getValueAt(i, 1),
        tblPhysician.getValueAt(i, 2),tblPhysician.getValueAt(i, 3),
        tblPhysician.getValueAt(i, 4),tblPhysician.getValueAt(i, 5),
        tblPhysician.getValueAt(i, 6),tblPhysician.getValueAt(i, 7),
        tblPhysician.getValueAt(i, 8),tblPhysician.getValueAt(i, 9)};
        dt.addRow(o);
        tblPatientHistory.setModel(dt);
       // mainLogin obj = new mainLogin();
        obj.setpatienthistory(pID, dt);
        
    }//GEN-LAST:event_btnbookAppointmentActionPerformed

    private void btnCancelAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelAppointmentActionPerformed
        // TODO add your handling code here:
          int i =tblPhysician.getSelectedRow();
          String status = tblPhysician.getValueAt(i, 7).toString();
          int j = Integer.parseInt(tblPhysician.getValueAt(i, 8).toString());
          if(status.equals("Booked") && j==pID){
            tblPhysician.setValueAt("Cancelled", i, 7 );
            tblPhysician.setValueAt(0, i, 8);
            tblPhysician.setValueAt(bookID, i, 9);
            tID = Integer.parseInt(tblPhysician.getValueAt(i, 2).toString());
            int bID = Integer.parseInt(tblPhysician.getValueAt(i, 9).toString());
            obj.bookAppointment("Cancelled", pID, tblPhysician.getValueAt(i, 0).toString(),tID,bID);
          }else{
             JOptionPane.showMessageDialog(this,"You can not Cancel this appointment");  
          }
        DefaultTableModel dt= (DefaultTableModel)tblPatientHistory.getModel();
        Object o[]= {tblPhysician.getValueAt(i, 0),tblPhysician.getValueAt(i, 1),
        tblPhysician.getValueAt(i, 2),tblPhysician.getValueAt(i, 3),
        tblPhysician.getValueAt(i, 4),tblPhysician.getValueAt(i, 5),
        tblPhysician.getValueAt(i, 6),tblPhysician.getValueAt(i, 7),
        tblPhysician.getValueAt(i, 8),tblPhysician.getValueAt(i, 9)};
        dt.addRow(o);
        tblPatientHistory.setModel(dt);
    }//GEN-LAST:event_btnCancelAppointmentActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //mainLogin obj = new mainLogin();
        try{    
           FileWriter fw=new FileWriter("patient.txt",true);
           fw.write("Physician Name\t\t\t" +
"Specialisation\t\t\t" +
"TreatmentID\t\t\t" +
"Treatment\t\t\t" +
"Day Time\t\t\t" +
"Room Name\t\t\t" +
"Room Status\t\t\t" +
"Appointment Status\t\t\t" +
"Patient\t\t\t" +
"BookingID");
           fw.write("\r\n");
           for (int i=0;i<tblPatientHistory.getRowCount();i++){
               for(int j=0;j<tblPatientHistory.getColumnCount();j++){
               fw.write(tblPatientHistory.getValueAt(i, j).toString() + "\t\t\t");
               }
               fw.write("\r\n");
           }
           
           fw.close();    
          }catch(Exception e){System.out.println(e);   
          System.out.println("Success...");    
            }    
        obj.setFocusable(true);
        this.hide();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnattendedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnattendedActionPerformed
        // TODO add your handling code here:
         int i =tblPhysician.getSelectedRow();
          String status = tblPhysician.getValueAt(i, 7).toString();
          int j = Integer.parseInt(tblPhysician.getValueAt(i, 8).toString());
          if(status.equals("Booked") && j==pID){
            tblPhysician.setValueAt("Attended", i, 7 );
            tblPhysician.setValueAt(pID, i, 8);
            tblPhysician.setValueAt(bookID, i, 9);
            tID = Integer.parseInt(tblPhysician.getValueAt(i, 2).toString());
            int bID = Integer.parseInt(tblPhysician.getValueAt(i, 9).toString());
            obj.bookAppointment("Attended", pID, tblPhysician.getValueAt(i, 0).toString(),tID,bID);
          }else{
              JOptionPane.showMessageDialog(this,"You can not attend this appointment");  
          }
        DefaultTableModel dt= (DefaultTableModel)tblPatientHistory.getModel();
        Object o[]= {tblPhysician.getValueAt(i, 0),tblPhysician.getValueAt(i, 1),
        tblPhysician.getValueAt(i, 2),tblPhysician.getValueAt(i, 3),
        tblPhysician.getValueAt(i, 4),tblPhysician.getValueAt(i, 5),
        tblPhysician.getValueAt(i, 6),tblPhysician.getValueAt(i, 7),
        tblPhysician.getValueAt(i, 8),tblPhysician.getValueAt(i, 9)};
        dt.addRow(o);
        tblPatientHistory.setModel(dt);
    }//GEN-LAST:event_btnattendedActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int i =tblPhysician.getSelectedRow();
          String status = tblPhysician.getValueAt(i, 7).toString();
          int j = Integer.parseInt(tblPhysician.getValueAt(i, 8).toString());
          if(status.equals("Booked") && j==pID){
            tblPhysician.setValueAt("Not Attended", i, 7 );
            tblPhysician.setValueAt(pID, i, 8);
            tblPhysician.setValueAt(bookID, i, 9);
            tID = Integer.parseInt(tblPhysician.getValueAt(i, 2).toString());
            int bID = Integer.parseInt(tblPhysician.getValueAt(i, 9).toString());
            obj.bookAppointment("Not Attended", pID, tblPhysician.getValueAt(i, 0).toString(),tID,bID);
          }else{
              JOptionPane.showMessageDialog(this,"You can not mark it not attended");  
          }
        DefaultTableModel dt= (DefaultTableModel)tblPatientHistory.getModel();
        Object o[]= {tblPhysician.getValueAt(i, 0),tblPhysician.getValueAt(i, 1),
        tblPhysician.getValueAt(i, 2),tblPhysician.getValueAt(i, 3),
        tblPhysician.getValueAt(i, 4),tblPhysician.getValueAt(i, 5),
        tblPhysician.getValueAt(i, 6),tblPhysician.getValueAt(i, 7),
        tblPhysician.getValueAt(i, 8),tblPhysician.getValueAt(i, 9)};
        dt.addRow(o);
        tblPatientHistory.setModel(dt);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int i =tblPhysician.getSelectedRow();
        String status = tblPhysician.getValueAt(i, 7).toString();
        int j = Integer.parseInt(tblPhysician.getValueAt(i, 8).toString());
        if(status.equals("Not Attended") && j==pID){
            tblPhysician.setValueAt("Empty", i, 7 );
            tblPhysician.setValueAt(0, i, 8);
            tblPhysician.setValueAt(0, i, 9);
            tID = Integer.parseInt(tblPhysician.getValueAt(i, 2).toString());
            int bID = Integer.parseInt(tblPhysician.getValueAt(i, 9).toString());
            obj.bookAppointment("Empty", 0, tblPhysician.getValueAt(i, 0).toString(),tID,0);
        }else{
            JOptionPane.showMessageDialog(this,"You can not mark it empty");  
        }
        DefaultTableModel dt= (DefaultTableModel)tblPatientHistory.getModel();
        Object o[]= {tblPhysician.getValueAt(i, 0),tblPhysician.getValueAt(i, 1),
        tblPhysician.getValueAt(i, 2),tblPhysician.getValueAt(i, 3),
        tblPhysician.getValueAt(i, 4),tblPhysician.getValueAt(i, 5),
        tblPhysician.getValueAt(i, 6),tblPhysician.getValueAt(i, 7),
        tblPhysician.getValueAt(i, 8),tblPhysician.getValueAt(i, 9)};
        dt.addRow(o);
        tblPatientHistory.setModel(dt);     
        
    }//GEN-LAST:event_jButton3ActionPerformed
     
    public void displayAllData(physicians[] p){
          DefaultTableModel dt= (DefaultTableModel)tblPhysician.getModel();
        
        String number = cmbxphysician.getItemAt(cmbxphysician.getSelectedIndex());
        number = number.substring(0, number.indexOf("-")-1);
        int i = Integer.parseInt(number);
        physID= i;
        System.out.println(number);
        
        //mainLogin obj = new mainLogin();
        //for(int j=0;j<5;i++){
        dt = obj.getPhysicianData(physID,dt,true);
        //}
        
        int row=dt.getRowCount();
        int column = dt.getColumnCount();
        //int[] remove= new int[500];
        int l=0;
        for(int j=0;j<row;j++){
            for(int k=0;k<column;k++){
                Object ob = dt.getValueAt(j, k);
                if(ob==null){
                    //remove[l]=j;
                    //l++;
                    dt.removeRow(j);
                    j=0;
                    row--;
                    //System.out.println(remove);
                    break;
                }
                
            }
           // dt.removeRow(remove);
        }
       /* for(int j=0;j<l;j++)
           dt.removeRow(j); */
           // if(dt.getValueAt(1, 2).equals("null")){
               // dt.removeRow(1);
           // }
        //}
        
        tblPhysician.setModel(dt);
     }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(patientInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(patientInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(patientInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(patientInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
       
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new patientInterface().setVisible(true);
            }
        });
    }
    public void physiciandata(physicians[] phy){
        
        for (int i = 0 ;i<5;i++){
            
            cmbxphysician.addItem(phy[i].getNumber() + " - " + phy[i].getFullname());
            /*for(int j = 0; j< phy[i].speciality.length; j++ ){
                //System.out.println(phy[i].speciality[j].name);
                cmbxspecialisation.addItem(phy[i].getNumber() + " - " + phy[i].speciality[j].name);
            }*/
            
        }
        cmbxspecialisation.addItem("Osteopathy");
        cmbxspecialisation.addItem("Rehabilitation");
        cmbxspecialisation.addItem("Physiotherapist");
        
        cmbxphysician.enable(false);
        cmbxspecialisation.enable(false);
    }
    public void patientdata(Patient p){
        jLabel1.setText("Welcome - " + p.getNumber() + " " + p.getFullname() + " " + p.getAddress() + " " + p.getPh_number());
        pID=p.getNumber();
       
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelAppointment;
    private javax.swing.JButton btnattended;
    private javax.swing.JButton btnbookAppointment;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cmbxphysician;
    private javax.swing.JComboBox<String> cmbxspecialisation;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tblPatientHistory;
    private javax.swing.JTable tblPhysician;
    // End of variables declaration//GEN-END:variables
}
