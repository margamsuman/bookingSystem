/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bookingsystem;

import java.awt.peer.ListPeer;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author IT Services
 */
public class mainLogin extends javax.swing.JFrame {
   static physicians[] phys = new physicians[5];
   static Speciality[] special = new Speciality[3];
   static Rooms[] rooms = new Rooms[10];
   static Patient[] patient = new Patient[25];
   static int newID=36;
   static int patindex =15;
   DefaultTableModel forTest = new DefaultTableModel();
   
   
    /**
     * Creates new form mainLogin
     */
    public mainLogin() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listPatient = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();
        btnpatient = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtpatientName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtpatAddress = new javax.swing.JTextField();
        txtphone = new javax.swing.JTextField();
        txtPatID = new javax.swing.JTextField();
        btnRegistration = new javax.swing.JButton();
        btnReports = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(153, 204, 255));

        jPanel1.setBackground(new java.awt.Color(51, 153, 255));

        jLabel1.setFont(new java.awt.Font("Tunga", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("WELCOME TO BOOKING SYSTEM OF PSIC");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane1.setViewportView(listPatient);

        jLabel5.setText("Patient List");

        btnpatient.setText("PATIENT");
        btnpatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnpatientActionPerformed(evt);
            }
        });

        jButton1.setText("VISITOR LOGIN");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Name");

        jLabel3.setText("Address:");

        jLabel4.setText("Phone Number:");

        jLabel6.setText("ID:");

        txtPatID.setEnabled(false);

        btnRegistration.setText("NEW PATIENT REGISTERATION");
        btnRegistration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPatID, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtpatAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtphone, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtpatientName, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(btnRegistration)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtpatientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtpatAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtphone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtPatID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addComponent(btnRegistration, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(123, Short.MAX_VALUE))
        );

        btnReports.setText("REPORTS");
        btnReports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnpatient, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                            .addComponent(btnReports, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(jLabel5)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(btnpatient, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnReports, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addContainerGap(22, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String name=JOptionPane.showInputDialog(this,"Enter Name");    
        visitorClass[] vc = new visitorClass[20];
        Visitor v = new Visitor();
        v.physiciandata(phys,name);
        v.show();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnpatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnpatientActionPerformed
        // TODO add your handling code here

        if (btnpatient.getText().equals("PATIENT") ){
            DefaultListModel listModel;
            listModel = new DefaultListModel();
            for(int i =0;i<patindex;i++){
                listModel.addElement(patient[i].getNumber() + " - " +patient[i].getFullname());

            }
            listPatient.setModel(listModel);
            btnpatient.setText("LOGIN");
        }else if (btnpatient.getText().equals("LOGIN")){
            String number = listPatient.getSelectedValue().toString();
            number = number.substring(0, number.indexOf("-")-1);
            int i = Integer.parseInt(number);
            for(int j=0;j<patindex;j++){
                if(patient[j].getNumber()==i){
                    patientInterface patientint = new patientInterface();
                    patientint.patientdata(patient[j]);
                    patientint.physiciandata(phys);
                    patientint.show();

                }
            }

        }

    }//GEN-LAST:event_btnpatientActionPerformed

    private void btnRegistrationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrationActionPerformed
        // TODO add your handling code here:
        Integer j = newID;
        txtPatID.setText(j.toString());
        newPatient(txtpatientName.getText(),txtpatAddress.getText(),txtphone.getText());
        DefaultListModel listModel;
        listModel = new DefaultListModel();
        for(int i =0;i<patindex;i++){
                listModel.addElement(patient[i].getNumber() + " - " +patient[i].getFullname());
        }
        listPatient.setModel(listModel);
        btnpatient.setText("PATIENT");
        
        
    }//GEN-LAST:event_btnRegistrationActionPerformed

    private void btnReportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportsActionPerformed
        // TODO add your handling code here:
        Reports obj = new Reports();
        obj.readReport();
        obj.show();
    }//GEN-LAST:event_btnReportsActionPerformed
    public void newPatient( String pname,String pAddress, String pphone){
        patient[patindex] = new Patient(newID, pname, pAddress, pname);
        newID++;
        patindex++;
        JOptionPane.showMessageDialog(this,"Patient Successfully Registered"); 
    }
    public boolean checkAlreadyBooking(int pid,String time){
        boolean b = false;
        for(int i = 0; i<5;i++){
            for(int j=0;j<phys[i].speciality.length-1;j++){
                    for(int k=0; k<phys[i].speciality[j].appointment.length; k++){
                         if(phys[i].speciality[j].appointment[k].patientId==pid && phys[i].speciality[j].appointment[k].datetime.equals(time) ){
                           b=true;  
                         }
                    }
                   
                }
            }
        
        return b;
    }
    
    public void setpatienthistory(int patientID,DefaultTableModel dt){
        for(int i=0;i<patindex;i++){
            if(patient[i].getNumber()==patientID){
                patient[i].dtpatient=dt;
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
       
 
       FileWriter fw=new FileWriter("patient.txt"); 
       FileWriter fw2=new FileWriter("visitor.txt"); 
       
       //addRooms();
       addPhysicianData();
       addPatient();
       addAppointment();
            
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainLogin().setVisible(true);
                
            }
        });
    }
    public static void addPatient(){
        patient[0] = new Patient(21,"Ellie","England","2134569");
        patient[1] = new Patient(22,"Audrey","England","1122334");
        patient[2] = new Patient(23,"Jack","England","2589631");
        patient[3] = new Patient(24,"Lily","England","2354169");
        patient[4] = new Patient(25,"Olive","England","1236589");
        patient[5] = new Patient(26,"Sara","England","3322556");
        patient[6] = new Patient(27,"Hail","England","8965896");
        patient[7] = new Patient(28,"Kit","England","8528528");
        patient[8] = new Patient(29,"Shaw","England","4564564");
        patient[9] = new Patient(30,"Lilac","England","7532589");
        patient[10] = new Patient(31,"Clover","England","9856999");
        patient[11] = new Patient(32,"Ela","England","8889998");
        patient[12] = new Patient(33,"Edward","England","1111122");
        patient[13] = new Patient(34,"Kate","England","2563256");
        patient[14] = new Patient(35,"Oscar","England","2145966");
        
        

        
    }
    public static void addAppointment(){
        int i =30;
        phys[0].speciality[0].appointment[0] = new Appointment(i++,"Massage","Medical Consultancy A","Available","Monday, 3 May 2021, 10:00-11:00","Empty",0,0);
        phys[0].speciality[0].appointment[1] = new Appointment(i++,"Massage","Medical Consultancy A","Available","Monday, 3 May 2021, 10:00-11:00","Empty",0,0);
        phys[0].speciality[0].appointment[2] = new Appointment(i++,"Massage","Medical Consultancy A","Available","Wednesday, 5 May 2021, 10:00-11:00","Empty",0,0);
        phys[0].speciality[0].appointment[3] = new Appointment(i++,"Massage","Medical Consultancy A","Available","Thursday, 6 May 2021, 10:00-11:00","Empty",0,0);
        phys[0].speciality[0].appointment[4] = new Appointment(i++,"Massage","Medical Consultancy A","Available","Friday, 7 May 2021, 10:00-11:00","Empty",0,0);
        phys[0].speciality[1].appointment[0] = new Appointment(i++,"Accupuncture","Medical Consultancy B","Available","Monday, 10 May 2021, 10:00-11:00","Empty",0,0);
        phys[0].speciality[1].appointment[1] = new Appointment(i++,"Accupuncture","Medical Consultancy B","Available","Tuesday, 11 May 2021, 10:00-11:00","Empty",0,0);
        phys[0].speciality[1].appointment[2] = new Appointment(i++,"Accupuncture","Medical Consultancy B","Available","Wednesday, 12 May 2021, 10:00-11:00","Empty",0,0);
        phys[0].speciality[1].appointment[3] = new Appointment(i++,"Accupuncture","Medical Consultancy B","Available","Thursday, 13 May 2021, 10:00-11:00","Empty",0,0);
        phys[0].speciality[1].appointment[4] = new Appointment(i++,"Accupuncture","Medical Consultancy B","Available","Friday, 14 May 2021, 10:00-11:00","Empty",0,0);
        
        phys[1].speciality[0].appointment[0] = new Appointment(i++,"Massage","Medical Consultancy A","Available","Monday, 3 May 2021, 12:00-13:00","Empty",0,0);
        phys[1].speciality[0].appointment[1] = new Appointment(i++,"Massage","Medical Consultancy A","Available","Tuesday, 4 May 2021, 12:00-13:00","Empty",0,0);
        phys[1].speciality[0].appointment[2] = new Appointment(i++,"Massage","Medical Consultancy A","Available","Wednesday, 5 May 2021, 12:00-13:00","Empty",0,0);
        phys[1].speciality[0].appointment[3] = new Appointment(i++,"Massage","Medical Consultancy A","Available","Thursday, 6 May 2021, 12:00-13:00","Empty",0,0);
        phys[1].speciality[0].appointment[4] = new Appointment(i++,"Massage","Medical Consultancy A","Available","Friday, 7 May 2021, 12:00-13:00","Empty",0,0);
        phys[1].speciality[0].appointment[5] = new Appointment(i++,"Neural Mobilisation","Medical Consultancy C","Available","Monday, 3 May 2021, 10:00-11:00","Empty",0,0);
        phys[1].speciality[0].appointment[6] = new Appointment(i++,"Neural Mobilisation","Medical Consultancy C","Available","Tuesday, 4 May 2021, 10:00-11:00","Empty",0,0);
        phys[1].speciality[0].appointment[7] = new Appointment(i++,"Neural Mobilisation","Medical Consultancy C","Available","Wednesday, 5 May 2021, 10:00-11:00","Empty",0,0);
        phys[1].speciality[0].appointment[8] = new Appointment(i++,"Neural Mobilisation","Medical Consultancy C","Available","Thursday, 6 May 2021, 10:00-11:00","Empty",0,0);
        phys[1].speciality[0].appointment[9] = new Appointment(i++,"Neural Mobilisation","Medical Consultancy C","Available","Friday, 7 May 2021, 10:00-11:00","Empty",0,0);
        phys[1].speciality[1].appointment[0] = new Appointment(i++,"Pool Rehabiliation","swimming pool","Available","Monday, 10 May 2021, 10:00-11:00","Empty",0,0);
        phys[1].speciality[1].appointment[1] = new Appointment(i++,"Pool Rehabiliation","swimming pool","Available","Tuesday, 11 May 2021, 10:00-11:00","Empty",0,0);
        phys[1].speciality[1].appointment[2] = new Appointment(i++,"Pool Rehabiliation","swimming pool","Available","Wednesday, 12 May 2021, 10:00-11:00","Empty",0,0);
        phys[1].speciality[1].appointment[3] = new Appointment(i++,"Pool Rehabiliation","swimming pool","Available","Thursday, 13 May 2021, 10:00-11:00","Empty",0,0);
        phys[1].speciality[1].appointment[4] = new Appointment(i++,"Pool Rehabiliation","swimming pool","Available","Friday, 14 May 2021, 10:00-11:00","Empty",0,0);
       
        phys[2].speciality[0].appointment[0] = new Appointment(i++,"Accupuncture","Medical Consultancy C","Available","Monday, 3 May 2021, 12:00-13:00","Empty",0,0);
        phys[2].speciality[0].appointment[1] = new Appointment(i++,"Accupuncture","Medical Consultancy C","Available","Tuesday, 4 May 2021, 12:00-13:00","Empty",0,0);
        phys[2].speciality[0].appointment[2] = new Appointment(i++,"Accupuncture","Medical Consultancy C","Available","Wednesday, 5 May 2021, 12:00-13:00","Empty",0,0);
        phys[2].speciality[0].appointment[3] = new Appointment(i++,"Accupuncture","Medical Consultancy C","Available","Thursday, 6 May 2021, 12:00-13:00","Empty",0,0);
        phys[2].speciality[0].appointment[4] = new Appointment(i++,"Accupuncture","Medical Consultancy C","Available","Friday, 7 May 2021, 12:00-13:00","Empty",0,0);
        phys[2].speciality[0].appointment[5] = new Appointment(i++,"Accupuncture","Medical Consultancy C","Available","Monday, 17 May 2021, 12:00-13:00","Empty",0,0);
        phys[2].speciality[0].appointment[6] = new Appointment(i++,"Accupuncture","Medical Consultancy C","Available","Tuesday, 18 May 2021, 12:00-13:00","Empty",0,0);
        phys[2].speciality[0].appointment[7] = new Appointment(i++,"Accupuncture","Medical Consultancy C","Available","Wednesday, 19 May 2021, 12:00-13:00","Empty",0,0);
        phys[2].speciality[0].appointment[8] = new Appointment(i++,"Accupuncture","Medical Consultancy C","Available","Thursday, 20 May 2021, 12:00-13:00","Empty",0,0);
        phys[2].speciality[0].appointment[9] = new Appointment(i++,"Accupuncture","Medical Consultancy C","Available","Friday, 21 May 2021, 12:00-13:00","Empty",0,0);
        phys[2].speciality[1].appointment[0] = new Appointment(i++,"Pool Rehabiliation","swimming pool","Available","Monday, 10 May 2021, 9:00-10:00","Empty",0,0);
        phys[2].speciality[1].appointment[1] = new Appointment(i++,"Pool Rehabiliation","swimming pool","Available","Tuesday, 11 May 2021, 9:00-10:00","Empty",0,0);
        phys[2].speciality[1].appointment[2] = new Appointment(i++,"Pool Rehabiliation","swimming pool","Available","Wednesday, 12 May 2021, 9:00-10:00","Empty",0,0);
        phys[2].speciality[1].appointment[3] = new Appointment(i++,"Pool Rehabiliation","swimming pool","Available","Thursday, 13 May 2021, 9:00-10:00","Empty",0,0);
        phys[2].speciality[1].appointment[4] = new Appointment(i++,"Pool Rehabiliation","swimming pool","Available","Friday, 14 May 2021, 9:00-10:00","Empty",0,0);
        
        phys[3].speciality[0].appointment[0] = new Appointment(i++,"Accupuncture","Medical Consultancy B","Available","Monday, 3 May 2021, 12:00-13:00","Empty",0,0);
        phys[3].speciality[0].appointment[1] = new Appointment(i++,"Accupuncture","Medical Consultancy B","Available","Tuesday, 4 May 2021, 12:00-13:00","Empty",0,0);
        phys[3].speciality[0].appointment[2] = new Appointment(i++,"Accupuncture","Medical Consultancy B","Available","Wednesday, 5 May 2021, 12:00-13:00","Empty",0,0);
        phys[3].speciality[0].appointment[3] = new Appointment(i++,"Accupuncture","Medical Consultancy B","Available","Thursday, 6 May 2021, 12:00-13:00","Empty",0,0);
        phys[3].speciality[0].appointment[4] = new Appointment(i++,"Accupuncture","Medical Consultancy B","Available","Friday, 7 May 2021, 12:00-13:00","Empty",0,0);
        phys[3].speciality[0].appointment[5] = new Appointment(i++,"Accupuncture","Medical Consultancy B","Available","Monday, 17 May 2021, 12:00-13:00","Empty",0,0);
        phys[3].speciality[0].appointment[6] = new Appointment(i++,"Accupuncture","Medical Consultancy B","Available","Tuesday, 18 May 2021, 12:00-13:00","Empty",0,0);
        phys[3].speciality[0].appointment[7] = new Appointment(i++,"Accupuncture","Medical Consultancy B","Available","Wednesday, 19 May 2021, 12:00-13:00","Empty",0,0);
        phys[3].speciality[0].appointment[8] = new Appointment(i++,"Accupuncture","Medical Consultancy B","Available","Thursday, 20 May 2021, 12:00-13:00","Empty",0,0);
        phys[3].speciality[0].appointment[9] = new Appointment(i++,"Accupuncture","Medical Consultancy B","Available","Friday, 21 May 2021, 12:00-13:00","Empty",0,0);
        phys[3].speciality[1].appointment[0] = new Appointment(i++,"Pool Rehabiliation","swimming pool","Available","Monday, 10 May 2021, 9:00-10:00","Empty",0,0);
        phys[3].speciality[1].appointment[1] = new Appointment(i++,"Pool Rehabiliation","swimming pool","Available","Tuesday, 11 May 2021, 9:00-10:00","Empty",0,0);
        phys[3].speciality[1].appointment[2] = new Appointment(i++,"Pool Rehabiliation","swimming pool","Available","Wednesday, 12 May 2021, 9:00-10:00","Empty",0,0);
        phys[3].speciality[1].appointment[3] = new Appointment(i++,"Pool Rehabiliation","swimming pool","Available","Thursday, 13 May 2021, 9:00-10:00","Empty",0,0);
        phys[3].speciality[1].appointment[4] = new Appointment(i++,"Pool Rehabiliation","swimming pool","Available","Friday, 14 May 2021, 9:00-10:00","Empty",0,0);
        phys[3].speciality[1].appointment[0] = new Appointment(i++,"Pool Rehabiliation","Gym","Available","Monday, 24 May 2021, 9:00-10:00","Empty",0,0);
        phys[3].speciality[1].appointment[1] = new Appointment(i++,"Pool Rehabiliation","Gym","Available","Tuesday, 25 May 2021, 9:00-10:00","Empty",0,0);
        phys[3].speciality[1].appointment[2] = new Appointment(i++,"Pool Rehabiliation","Gym","Available","Wednesday, 26 May 2021, 9:00-10:00","Empty",0,0);
        phys[3].speciality[1].appointment[3] = new Appointment(i++,"Pool Rehabiliation","Gym","Available","Thursday, 27 May 2021, 9:00-10:00","Empty",0,0);
        phys[3].speciality[1].appointment[4] = new Appointment(i++,"Pool Rehabiliation","Gym","Available","Friday, 28 May 2021, 9:00-10:00","Empty",0,0);
        
        phys[4].speciality[0].appointment[0] = new Appointment(i++,"Massage","Medical Consultancy B","Available","Monday, 3 May 2021, 13:00-14:00","Empty",0,0);
        phys[4].speciality[0].appointment[1] = new Appointment(i++,"Massage","Medical Consultancy B","Available","Tuesday, 4 May 2021, 13:00-14:00","Empty",0,0);
        phys[4].speciality[0].appointment[2] = new Appointment(i++,"Massage","Medical Consultancy B","Available","Wednesday, 5 May 2021, 13:00-14:00","Empty",0,0);
        phys[4].speciality[0].appointment[3] = new Appointment(i++,"Massage","Medical Consultancy B","Available","Thursday, 6 May 2021, 13:00-14:00","Empty",0,0);
        phys[4].speciality[0].appointment[4] = new Appointment(i++,"Massage","Medical Consultancy B","Available","Friday, 7 May 2021, 13:00-14:00","Empty",0,0);
        phys[4].speciality[0].appointment[5] = new Appointment(i++,"Massage","Medical Consultancy B","Available","Monday, 17 May 2021, 13:00-14:00","Empty",0,0);
        phys[4].speciality[0].appointment[6] = new Appointment(i++,"Massage","Medical Consultancy B","Available","Tuesday, 18 May 2021, 13:00-14:00","Empty",0,0);
        phys[4].speciality[0].appointment[7] = new Appointment(i++,"Massage","Medical Consultancy B","Available","Wednesday, 19 May 2021,13:00-14:00","Empty",0,0);
        phys[4].speciality[0].appointment[8] = new Appointment(i++,"Massage","Medical Consultancy B","Available","Thursday, 20 May 2021, 13:00-14:00","Empty",0,0);
        phys[4].speciality[0].appointment[9] = new Appointment(i++,"Massage","Medical Consultancy B","Available","Friday, 21 May 2021, 13:00-14:00","Empty",0,0);
        phys[4].speciality[1].appointment[0] = new Appointment(i++,"Pool Rehabiliation","Gym","Available","Monday, 10 May 2021, 13:00-14:00","Empty",0,0);
        phys[4].speciality[1].appointment[1] = new Appointment(i++,"Pool Rehabiliation","Gym","Available","Tuesday, 11 May 2021, 13:00-14:00","Empty",0,0);
        phys[4].speciality[1].appointment[2] = new Appointment(i++,"Pool Rehabiliation","Gym","Available","Wednesday, 12 May 2021, 13:00-14:00","Empty",0,0);
        phys[4].speciality[1].appointment[3] = new Appointment(i++,"Pool Rehabiliation","Gym","Available","Thursday, 13 May 2021, 13:00-14:00","Empty",0,0);
        phys[4].speciality[1].appointment[4] = new Appointment(i++,"Pool Rehabiliation","Gym","Available","Friday, 14 May 2021, 13:00-14:00","Empty",0,0);
        phys[4].speciality[1].appointment[5] = new Appointment(i++,"Pool Rehabiliation","Gym","Available","Monday, 24 May 2021, 13:00-14:00","Empty",0,0);
        phys[4].speciality[1].appointment[6] = new Appointment(i++,"Pool Rehabiliation","Gym","Available","Tuesday, 25 May 2021, 13:00-14:00","Empty",0,0);
        phys[4].speciality[1].appointment[7] = new Appointment(i++,"Pool Rehabiliation","Gym","Available","Wednesday, 26 May 2021, 13:00-14:00","Empty",0,0);
        phys[4].speciality[1].appointment[8] = new Appointment(i++,"Pool Rehabiliation","Gym","Available","Thursday, 27 May 2021, 13:00-14:00","Empty",0,0);
        phys[4].speciality[1].appointment[9] = new Appointment(i++,"Pool Rehabiliation","Gym","Available","Friday, 28 May 2021, 13:00-14:00","Empty",0,0);
      
    }
    public static void addRooms (){
        rooms[0] = new Rooms();
        rooms[0].setRoom("medical consulting suits A");
        rooms[0].setStatus("Empty");
        rooms[1] = new Rooms();
        rooms[1].setRoom("medical consulting suits B");
        rooms[1].setStatus("Empty");
        rooms[2] = new Rooms();
        rooms[2].setRoom("medical consulting suits C");
        rooms[2].setStatus("Empty");
        rooms[3] = new Rooms();
        rooms[3].setRoom("Swimming pool");
        rooms[3].setStatus("Empty");
        rooms[4] = new Rooms();
        rooms[4].setRoom("Gym");
        rooms[4].setStatus("Empty");
    }
    public static void addPhysicianData(){
        phys[0] = new physicians(28, "Zong", "London", "2010000");
        phys[0].speciality[0] =  new Speciality();
        phys[0].speciality[0].name = "Physiotherapist";
        phys[0].speciality[1] =  new Speciality();
        phys[0].speciality[1].name = "Osteopathy";
        phys[0].consultationHours[0]="Tuesday, 4 May 2021, 10:00-12:00";
        phys[0].consultationHours[1]="Wednesday, 12 May 2021, 10:00-12:00";
        phys[0].consultationHours[2]="Thursday, 20 May 2021, 12:00-14:00";
        phys[0].consultationHours[3]="Friday, 28 May 2021, 15:00-17:00";
        
        phys[1] = new physicians(56, "Kai", "London", "20987456");
        phys[1].speciality[0] =  new Speciality();
        phys[1].speciality[0].name = "Physiotherapist";
        phys[1].speciality[1] =  new Speciality();
        phys[1].speciality[1].name = "Rehabilitation";
        phys[1].consultationHours[0]="Monday, 3 May 2021, 12:00-14:00";
        phys[1].consultationHours[1]="Tuesday, 11 May 2021, 10:00-12:00";
        phys[1].consultationHours[2]="Wednesday, 19 May 2021, 12:00-14:00";
        phys[1].consultationHours[3]="Thursday, 27 May 2021, 15:00-17:00";
        
        phys[2] = new physicians(65, "Yan", "London", "4198765412");
        phys[2].speciality[0] =  new Speciality();
        phys[2].speciality[0].name = "Osteopathy";
        phys[2].speciality[1] =  new Speciality();
        phys[2].speciality[1].name = "Rehabilitation";
        phys[2].consultationHours[0]="Thursday, 6 May 2021, 12:00-14:00";
        phys[2].consultationHours[1]="Thursday, 13 May 2021, 12:00-14:00";
        phys[2].consultationHours[2]="Thursday, 20 May 2021, 12:00-14:00";
        phys[2].consultationHours[3]="Thursday, 27 May 2021, 15:00-17:00";
        
        phys[3] = new physicians(78, "Den", "London", "001459999");
        phys[3].speciality[0] =  new Speciality();
        phys[3].speciality[0].name = "Osteopathy";
        phys[3].speciality[1] =  new Speciality();
        phys[3].speciality[1].name = "Rehabilitation";
        phys[3].consultationHours[0]="Monday, 3 May 2021, 12:00-14:00";
        phys[3].consultationHours[1]="Tuesday, 11 May 2021, 10:00-12:00";
        phys[3].consultationHours[2]="Wednesday, 19 May 2021, 12:00-14:00";
        phys[3].consultationHours[3]="Thursday, 27 May 2021, 15:00-17:00";
        
        phys[4] = new physicians(69, "Chen", "London", "0041525252");
        phys[4].speciality[0] =  new Speciality();
        phys[4].speciality[0].name = "Physiotherapist";
        phys[4].speciality[1] =  new Speciality();
        phys[4].speciality[1].name = "Rehabilitation";
        phys[4].consultationHours[0]="Tuesday, 4 May 2021, 10:00-12:00";
        phys[4].consultationHours[1]="Wednesday, 12 May 2021, 10:00-12:00";
        phys[4].consultationHours[2]="Thursday, 20 May 2021, 12:00-14:00";
        phys[4].consultationHours[3]="Friday, 28 May 2021, 15:00-17:00";
        
        
    }
    public DefaultTableModel getSpecializationData(DefaultTableModel dt,String spec,Boolean b){
        DefaultTableModel SpecializationData = new DefaultTableModel();
        SpecializationData = dt;
        forTest = dt;
        for(int i =0; i<5;i++){
            System.out.println(phys[i].getFullname());
              for (int j = 0; j<phys[i].speciality.length;j++){
                  Object abc = phys[i].speciality[j].name;
                  System.out.println(abc+"----"+spec);
                  if(abc!=null){
                    if(abc==spec){
                    for(int k=0;k<phys[i].speciality[j].appointment.length;k++){
                        if(b){
                        Object obj[] = {
                           phys[i].getFullname(),
                           phys[i].speciality[j].name,
                           phys[i].speciality[j].appointment[k].treatmentId,
                           phys[i].speciality[j].appointment[k].treatment,
                           phys[i].speciality[j].appointment[k].datetime,
                           phys[i].speciality[j].appointment[k].room.getRoom(),
                           phys[i].speciality[j].appointment[k].room.getStatus(),
                           phys[i].speciality[j].appointment[k].status,
                           phys[i].speciality[j].appointment[k].patientId,
                           phys[i].speciality[j].appointment[k].getBookingID()
                           
                       };
                       SpecializationData.addRow(obj);
                        }else{
                       for (int l=0;l<phys[i].consultationHours.length;l++) {   
                       //System.out.println(phys[i].consultationHours[k]);
                       Object obj[] = {
                           phys[i].getFullname(),
                           phys[i].speciality[j].name,
                           phys[i].consultationHours[l],
                           "Empty",
                           "Empty"
                                                     
                       };
                       SpecializationData.addRow(obj); 
                    }
                        }   
                    break;
                  }
                  }
                  }
              }  
            
        }
        return SpecializationData;
    }
   
    public DefaultTableModel getPhysicianData(int number,DefaultTableModel dt, Boolean b){
        DefaultTableModel physicianData = new DefaultTableModel();
        physicianData = dt;
        
        for(int i =0; i<5;i++){
            if(phys[i].getNumber()==number){
                if(b){
                for (int j = 0; j<phys[i].speciality.length;j++){
                   for(int k=0;k<phys[i].speciality[j].appointment.length;k++){
                      
                      Object obj[] = {
                           phys[i].getFullname(),
                           phys[i].speciality[j].name,
                           phys[i].speciality[j].appointment[k].treatmentId,
                           phys[i].speciality[j].appointment[k].treatment,
                           phys[i].speciality[j].appointment[k].datetime,
                           phys[i].speciality[j].appointment[k].room.getRoom(),
                           phys[i].speciality[j].appointment[k].room.getStatus(),
                           phys[i].speciality[j].appointment[k].status,
                           phys[i].speciality[j].appointment[k].patientId,
                           phys[i].speciality[j].appointment[k].getBookingID()
                           
                       };
                       physicianData.addRow(obj);
                    
                  //  }
                }
                }
                }else{
                    for (int j = 0; j<phys[i].speciality.length;j++){
                     for (int k=0;k<phys[i].consultationHours.length;k++) {   
                       //System.out.println(phys[i].consultationHours[k]);
                       Object obj[] = {
                           phys[i].getFullname(),
                           phys[i].speciality[j].name,
                           phys[i].consultationHours[k],
                           "Empty",
                           "Empty"
                                                     
                       };
                       physicianData.addRow(obj); 
                    }
                }
                    
            }
               //Object[] obj = new Object {phys[i].
        }
        }
      
        return physicianData;
    }
    
    public void bookAppointment(String status, int pid,String phyName, int tID, int bID){
        for(int i = 0; i<5;i++){
            if(phys[i].getFullname().equals(phyName)){
                for(int j=0;j<phys[i].speciality.length-1;j++){
                    for(int k=0; k<phys[i].speciality[j].appointment.length; k++){
                         if(phys[i].speciality[j].appointment[k].treatmentId==tID){
                             phys[i].speciality[j].appointment[k].patientId=pid;
                             phys[i].speciality[j].appointment[k].bookingID=bID;
                             phys[i].speciality[j].appointment[k].status= status;
                         }
                    }
                   
                }
            }
        }
    }
  
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegistration;
    private javax.swing.JButton btnReports;
    private javax.swing.JButton btnpatient;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listPatient;
    private javax.swing.JTextField txtPatID;
    private javax.swing.JTextField txtpatAddress;
    private javax.swing.JTextField txtpatientName;
    private javax.swing.JTextField txtphone;
    // End of variables declaration//GEN-END:variables
}
